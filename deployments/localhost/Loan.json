{
  "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Fisch",
          "name": "_nftCollateralAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LoanIsLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LoanNotActive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "SenderNotReceiver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "CollateralLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentAvailableLendAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "innitialLendAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "FundsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LoanApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "LoanBorrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "LoanCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "LoanCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "name": "LoanDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LoanRepayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "PRIVATE_SALE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_SALE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "addfunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_borrowerId",
          "type": "uint256"
        }
      ],
      "name": "approveLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lenderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nftCollateralTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pricipalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "durationMonths",
          "type": "uint256"
        }
      ],
      "name": "calculateLoanInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "si",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lenderId",
          "type": "uint256"
        }
      ],
      "name": "cancelLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_noOfMonth",
          "type": "uint256"
        }
      ],
      "name": "convertMonthsToWeeks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "noOfweeks",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "noOfWeeks",
          "type": "uint256"
        }
      ],
      "name": "convertWeeksToSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "secondsByWeeks",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loanOutDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loanDurationMonthCount",
          "type": "uint256"
        }
      ],
      "name": "createOrListLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "deActivateLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_borrowId",
          "type": "uint256"
        }
      ],
      "name": "fetchBorrowSingle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "borrowerId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "innitialBorrowAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentBorrowAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAlreadyRemitted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lenderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftCollateralTokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiverAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isApproved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRepaid",
              "type": "bool"
            }
          ],
          "internalType": "struct Loan.Borrower",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "fetchLoanSingle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "loanId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "innitialLendAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentAvailableLendAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountRepaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loanOutDuration",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "locked",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "loanDurationInMonthCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Lender",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_borrowerId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_saleType",
          "type": "bytes"
        }
      ],
      "name": "liquidateCollateral",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftCollateral",
      "outputs": [
        {
          "internalType": "contract Fisch",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_borrowerId",
          "type": "uint256"
        }
      ],
      "name": "repayLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x435f49b3958da1b1b72210aa5c3df33c0b03ebfd0c0eee8403a5d964f7dea819",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "transactionIndex": 0,
    "gasUsed": "1622299",
    "logsBloom": "0x
    "blockHash": "0x9a3f963ca3e80d7db8fb539c22c7b9ce30ac57a2fc9f65e08523169892a17c06",
    "transactionHash": "0x435f49b3958da1b1b72210aa5c3df33c0b03ebfd0c0eee8403a5d964f7dea819",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x435f49b3958da1b1b72210aa5c3df33c0b03ebfd0c0eee8403a5d964f7dea819",
        "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9a3f963ca3e80d7db8fb539c22c7b9ce30ac57a2fc9f65e08523169892a17c06"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "1622299",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853"
  ],
  "numDeployments": 1,
  "solcInputHash": "2385d847d65228402754807aa166c15e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Fisch\",\"name\":\"_nftCollateralAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LoanIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LoanNotActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SenderNotReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"CollateralLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentAvailableLendAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"innitialLendAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"FundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LoanApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"LoanBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"LoanCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"LoanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"LoanDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LoanRepayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_SALE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"addfunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowerId\",\"type\":\"uint256\"}],\"name\":\"approveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lenderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftCollateralTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pricipalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationMonths\",\"type\":\"uint256\"}],\"name\":\"calculateLoanInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"si\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lenderId\",\"type\":\"uint256\"}],\"name\":\"cancelLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_noOfMonth\",\"type\":\"uint256\"}],\"name\":\"convertMonthsToWeeks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"noOfweeks\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"noOfWeeks\",\"type\":\"uint256\"}],\"name\":\"convertWeeksToSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"secondsByWeeks\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanOutDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanDurationMonthCount\",\"type\":\"uint256\"}],\"name\":\"createOrListLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"deActivateLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowId\",\"type\":\"uint256\"}],\"name\":\"fetchBorrowSingle\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"borrowerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"innitialBorrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBorrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAlreadyRemitted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lenderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftCollateralTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRepaid\",\"type\":\"bool\"}],\"internalType\":\"struct Loan.Borrower\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"fetchLoanSingle\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"innitialLendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAvailableLendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRepaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanOutDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanDurationInMonthCount\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Lender\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowerId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_saleType\",\"type\":\"bytes\"}],\"name\":\"liquidateCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftCollateral\",\"outputs\":[{\"internalType\":\"contract Fisch\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowerId\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Loan.sol\":\"Loan\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Fisch.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\ncontract Fisch is ERC721URIStorage, ReentrancyGuard, Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    using Strings for uint256;\\r\\n    string public baseURI;\\r\\n\\r\\n    error AssetIsFrozen(uint256 tokenId);\\r\\n\\r\\n    // EVENTS\\r\\n    event MintedNft(\\r\\n        address indexed owner,\\r\\n        string ttile,\\r\\n        string description,\\r\\n        uint256 tokenId,\\r\\n        string assetURI,\\r\\n        uint256 price,\\r\\n        uint256 revenue,\\r\\n        uint256 expenses,\\r\\n        uint256 traffic,\\r\\n        string productLink\\r\\n    );\\r\\n\\r\\n    struct DigitalAsset {\\r\\n        address owner;\\r\\n        string title;\\r\\n        string description;\\r\\n        uint256 tokenId;\\r\\n        uint256 price;\\r\\n        string assetURI;\\r\\n        uint256 revenue;\\r\\n        uint256 expenses;\\r\\n        uint256 traffic;\\r\\n        string productLink;\\r\\n        bool isFrozen;\\r\\n        address ownerEmail;\\r\\n    }\\r\\n    mapping(uint256 => DigitalAsset) public digitalAssets;\\r\\n\\r\\n    constructor() ERC721(\\\"Fischela\\\", \\\"FIS\\\") {}\\r\\n\\r\\n    function mintNFT(\\r\\n        string memory _title,\\r\\n        string memory _description,\\r\\n        string memory _assetURI,\\r\\n        uint256 _intialPrice,\\r\\n        uint256 _revenue,\\r\\n        uint256 _expenses,\\r\\n        uint256 _traffic,\\r\\n        string memory _productLink,\\r\\n        address _ownerEmail\\r\\n    ) public returns (uint256) {\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n        digitalAssets[tokenId] = DigitalAsset({\\r\\n            owner: msg.sender,\\r\\n            title: _title,\\r\\n            description: _description,\\r\\n            tokenId: tokenId,\\r\\n            price: _intialPrice,\\r\\n            assetURI: _assetURI,\\r\\n            revenue: _revenue,\\r\\n            expenses: _expenses,\\r\\n            traffic: _traffic,\\r\\n            productLink: _productLink,\\r\\n            isFrozen: false,\\r\\n            ownerEmail: _ownerEmail\\r\\n        });\\r\\n\\r\\n        _safeMint(msg.sender, tokenId);\\r\\n        _setTokenURI(tokenId, _assetURI);\\r\\n        emit MintedNft(\\r\\n            msg.sender,\\r\\n            _title,\\r\\n            _description,\\r\\n            tokenId,\\r\\n            _assetURI,\\r\\n            _intialPrice,\\r\\n            _revenue,\\r\\n            _expenses,\\r\\n            _traffic,\\r\\n            _productLink\\r\\n        );\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _baseURI) public {\\r\\n        baseURI = _baseURI;\\r\\n    }\\r\\n\\r\\n    function setPriceDigitalAsset(uint256 _price, uint256 tokenId) public {\\r\\n        digitalAssets[tokenId].price = _price;\\r\\n    }\\r\\n\\r\\n    function getNftItem(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (DigitalAsset memory) {\\r\\n        return digitalAssets[_tokenId];\\r\\n    }\\r\\n\\r\\n    function freeze(uint256 _tokenId) public onlyOwner{\\r\\n        digitalAssets[_tokenId].isFrozen = true;\\r\\n    }\\r\\n\\r\\n     function unfreeze(uint256 _tokenId) public onlyOwner{\\r\\n        digitalAssets[_tokenId].isFrozen = false;\\r\\n    }\\r\\n\\r\\n    function safeTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) public nonReentrant {\\r\\n        \\r\\n        _safeTransfer(_from, _to, _tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId,\\r\\n        bytes memory data\\r\\n    ) public virtual override {\\r\\n        if (digitalAssets[_tokenId].isFrozen){\\r\\n            revert AssetIsFrozen(_tokenId);\\r\\n        }\\r\\n        safeTransferFrom(_from, _to, _tokenId, data);\\r\\n    }\\r\\n\\r\\n    \\r\\n}\\r\\n\",\"keccak256\":\"0xaa1a54a31f98d0ac812882d4200146ee03746371573c645066d56b3637b4882a\",\"license\":\"UNLICENSED\"},\"contracts/Loan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./Fisch.sol\\\";\\r\\n\\r\\ncontract Loan is Ownable, ReentrancyGuard {\\r\\n    // default loan duration\\r\\n    uint256 private _defaultLoanDuration = 12;\\r\\n    uint256 public defaultInterestRate = 5;\\r\\n    bytes32 public constant PUBLIC_SALE =\\r\\n        keccak256(abi.encodePacked(\\\"PUBLIC_SALE\\\"));\\r\\n    bytes32 public constant PRIVATE_SALE =\\r\\n        keccak256(abi.encodePacked(\\\"PRIVATE_SALE\\\"));\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _borrowersIds;\\r\\n    Counters.Counter private _lendersIds;\\r\\n    Fisch public nftCollateral;\\r\\n\\r\\n    constructor(Fisch _nftCollateralAddress) {\\r\\n        nftCollateral = _nftCollateralAddress;\\r\\n    }\\r\\n\\r\\n    // create a struct for Lenders\\r\\n    struct Lender {\\r\\n        uint256 loanId;\\r\\n        uint256 innitialLendAmount;\\r\\n        uint256 currentAvailableLendAmount;\\r\\n        uint256 amountRepaid;\\r\\n        uint256 borrowerId;\\r\\n        uint256 interestRate; // using compound interest SI = PRT/100 to calculate interest rate\\r\\n        uint256 loanOutDuration;\\r\\n        bool locked;\\r\\n        bool isActive;\\r\\n        address lender;\\r\\n        uint256 loanDurationInMonthCount;\\r\\n    }\\r\\n\\r\\n    // create a struct for borowers\\r\\n    struct Borrower {\\r\\n        uint256 borrowerId;\\r\\n        address borrower;\\r\\n        uint256 innitialBorrowAmount;\\r\\n        uint256 currentBorrowAmount;\\r\\n        uint256 amountAlreadyRemitted;\\r\\n        uint256 deadline;\\r\\n        uint256 interest;\\r\\n        uint256 lenderId;\\r\\n        uint256 nftCollateralTokenId;\\r\\n        address receiverAddress;\\r\\n        bool isApproved;\\r\\n        bool isRepaid;\\r\\n    }\\r\\n\\r\\n    // events\\r\\n\\r\\n    event LoanCreated(uint256 amount, uint256 lenderId, address lender);\\r\\n\\r\\n    event LoanBorrowed(\\r\\n        uint256 borrowId,\\r\\n        uint256 amount,\\r\\n        uint256 lenderId,\\r\\n        address lender,\\r\\n        address borrower\\r\\n    );\\r\\n\\r\\n    event LoanApproved(\\r\\n        uint256 lenderId,\\r\\n        uint256 borrowerId,\\r\\n        address lender,\\r\\n        address borrower,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event LoanRepayed(\\r\\n        uint256 lenderId,\\r\\n        uint256 borrowerId,\\r\\n        address lender,\\r\\n        address borrower,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event CollateralLiquidated(\\r\\n        uint256 lenderId,\\r\\n        uint256 borrowerId,\\r\\n        address lender,\\r\\n        address borrower,\\r\\n        uint256 amount,\\r\\n        address liquidator\\r\\n    );\\r\\n\\r\\n    event LoanCancelled(\\r\\n        uint256 lenderId,\\r\\n        address lender,\\r\\n        uint256 amount,\\r\\n        bool isActive\\r\\n    );\\r\\n\\r\\n    event FundsAdded(\\r\\n        uint256 currentAvailableLendAmount,\\r\\n        uint256 innitialLendAmount,\\r\\n        address lender,\\r\\n        uint256 loanId\\r\\n    );\\r\\n    event LoanDeactivated(uint256 loanId, bool isActive, bool locked);\\r\\n\\r\\n    // errors\\r\\n\\r\\n    error SenderNotReceiver(address sender, address receiver);\\r\\n    error LoanNotActive();\\r\\n    error TransferFailed();\\r\\n    error LoanIsLocked();\\r\\n\\r\\n    // modifiers\\r\\n    modifier onlyLender(address _lender) {\\r\\n        require(msg.sender == _lender, \\\"Sender not Lender\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // create a list of lenders\\r\\n\\r\\n    mapping(uint256 => Lender) private _lenders;\\r\\n\\r\\n    // create a list of borrrowers\\r\\n\\r\\n    mapping(uint256 => Borrower) private _borrowers;\\r\\n\\r\\n    // createLoan\\r\\n    function createOrListLoan(\\r\\n        uint256 _interestRate,\\r\\n        uint256 _loanOutDuration,\\r\\n        uint256 _loanDurationMonthCount\\r\\n    ) public payable {\\r\\n        // create Loan\\r\\n        _lendersIds.increment();\\r\\n\\r\\n        uint256 currentCounter = _lendersIds.current();\\r\\n        _lenders[currentCounter] = Lender({\\r\\n            loanId: currentCounter,\\r\\n            currentAvailableLendAmount: msg.value,\\r\\n            amountRepaid: 0,\\r\\n            locked: false,\\r\\n            isActive: true,\\r\\n            lender: msg.sender,\\r\\n            innitialLendAmount: msg.value,\\r\\n            interestRate: _interestRate,\\r\\n            loanOutDuration: _loanOutDuration,\\r\\n            borrowerId: 0,\\r\\n            loanDurationInMonthCount: _loanDurationMonthCount != 0\\r\\n                ? _loanDurationMonthCount\\r\\n                : _defaultLoanDuration\\r\\n        });\\r\\n\\r\\n        emit LoanCreated(\\r\\n            _lenders[currentCounter].innitialLendAmount,\\r\\n            currentCounter,\\r\\n            _lenders[currentCounter].lender\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // calculate simple interest\\r\\n    function calculateLoanInterest(\\r\\n        uint256 pricipalAmount,\\r\\n        uint256 interestRate,\\r\\n        uint256 durationMonths\\r\\n    ) public pure returns (uint256 si) {\\r\\n        return\\r\\n            si = (pricipalAmount * interestRate * durationMonths) / (100 * 12);\\r\\n    }\\r\\n\\r\\n    // convert months to weeks\\r\\n    function convertMonthsToWeeks(\\r\\n        uint256 _noOfMonth\\r\\n    ) public pure returns (uint256 noOfweeks) {\\r\\n        return noOfweeks = 4 * _noOfMonth;\\r\\n    }\\r\\n\\r\\n    function convertWeeksToSeconds(\\r\\n        uint256 noOfWeeks\\r\\n    ) public pure returns (uint256 secondsByWeeks) {\\r\\n        return secondsByWeeks = noOfWeeks * 1 weeks;\\r\\n    }\\r\\n\\r\\n    // first create a function to borrow all\\r\\n    // Borrow\\r\\n\\r\\n    function borrow(\\r\\n        uint256 _lenderId,\\r\\n        uint256 _borrowAmount,\\r\\n        uint256 _nftCollateralTokenId,\\r\\n        address receiverAddress\\r\\n    ) public {\\r\\n        // check if receiver address equals msg.sender\\r\\n        if (receiverAddress != msg.sender) {\\r\\n            revert SenderNotReceiver(msg.sender, receiverAddress);\\r\\n        }\\r\\n\\r\\n        if (!_lenders[_lenderId].isActive) {\\r\\n            revert LoanNotActive();\\r\\n        }\\r\\n\\r\\n        if (!_lenders[_lenderId].locked) {\\r\\n            revert LoanIsLocked();\\r\\n        }\\r\\n\\r\\n        // calculate amount to be repayed\\r\\n        uint256 conclusiveBorrowAmount = _borrowAmount +\\r\\n            calculateLoanInterest(\\r\\n                _borrowAmount,\\r\\n                _lenders[_lenderId].interestRate,\\r\\n                _lenders[_lenderId].loanDurationInMonthCount\\r\\n            );\\r\\n\\r\\n        // create Loan\\r\\n        _borrowersIds.increment();\\r\\n        uint256 currentCounter = _borrowersIds.current();\\r\\n        _borrowers[currentCounter] = Borrower({\\r\\n            borrowerId: currentCounter,\\r\\n            borrower: msg.sender,\\r\\n            currentBorrowAmount: 0,\\r\\n            innitialBorrowAmount: conclusiveBorrowAmount,\\r\\n            amountAlreadyRemitted: 0,\\r\\n            deadline: 0,\\r\\n            interest: 0,\\r\\n            lenderId: _lenderId,\\r\\n            nftCollateralTokenId: _nftCollateralTokenId,\\r\\n            receiverAddress: msg.sender,\\r\\n            isApproved: false,\\r\\n            isRepaid: false\\r\\n        });\\r\\n\\r\\n        emit LoanBorrowed(\\r\\n            _lenders[currentCounter].loanId,\\r\\n            _borrowers[currentCounter].innitialBorrowAmount,\\r\\n            _lenderId,\\r\\n            _lenders[_lenderId].lender,\\r\\n            _borrowers[currentCounter].borrower\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // approveLoan\\r\\n    /*\\r\\n        - approve loan verifies receiver\\r\\n        - freezes nft collateral\\r\\n        - transfers loan to borrower\\r\\n     */\\r\\n    function approveLoan(uint256 _borrowerId) public onlyOwner nonReentrant {\\r\\n        Borrower storage borrower = _borrowers[_borrowerId];\\r\\n        if (borrower.receiverAddress != msg.sender) {\\r\\n            revert SenderNotReceiver(borrower.receiverAddress, msg.sender);\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            nftCollateral.ownerOf(borrower.nftCollateralTokenId) != msg.sender\\r\\n        ) {\\r\\n            revert(\\\"Sender not NFT owner\\\");\\r\\n        }\\r\\n\\r\\n        // freeze NFT\\r\\n        nftCollateral.freeze(borrower.nftCollateralTokenId);\\r\\n\\r\\n        Lender storage lender = _lenders[borrower.lenderId];\\r\\n\\r\\n        // deduct loan amount from lender\\r\\n        lender.currentAvailableLendAmount -= borrower.innitialBorrowAmount;\\r\\n\\r\\n        // set loan deadline\\r\\n        borrower.deadline =\\r\\n            block.timestamp +\\r\\n            convertWeeksToSeconds(\\r\\n                convertMonthsToWeeks(lender.loanDurationInMonthCount)\\r\\n            );\\r\\n\\r\\n        // add loan amount to borrower\\r\\n        borrower.currentBorrowAmount += borrower.innitialBorrowAmount;\\r\\n\\r\\n        // transfer loan to msgSender\\r\\n        (bool success, ) = msg.sender.call{\\r\\n            value: borrower.innitialBorrowAmount\\r\\n        }(\\\"\\\");\\r\\n\\r\\n        if (!success) {\\r\\n            revert TransferFailed();\\r\\n        }\\r\\n        emit LoanApproved(\\r\\n            borrower.lenderId,\\r\\n            _borrowerId,\\r\\n            lender.lender,\\r\\n            borrower.borrower,\\r\\n            borrower.innitialBorrowAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // repayLoan ---- monthly repayment of loans\\r\\n    /*\\r\\n     * Repay loan\\r\\n     * checks if current amount repays all the loan\\r\\n     * transfers amount to lender\\r\\n     * exonerates borrower\\r\\n     */\\r\\n    function repayLoan(uint256 _borrowerId) public payable nonReentrant {\\r\\n        // check if current msg.value repays loan\\r\\n        Borrower storage borrower = _borrowers[_borrowerId];\\r\\n        Lender storage lender = _lenders[borrower.lenderId];\\r\\n\\r\\n        // transfer amount to lender\\r\\n        lender.currentAvailableLendAmount += msg.value;\\r\\n        lender.amountRepaid += msg.value;\\r\\n\\r\\n        // exonerate borrower\\r\\n        borrower.amountAlreadyRemitted += msg.value;\\r\\n        borrower.currentBorrowAmount -= msg.value;\\r\\n\\r\\n        if (borrower.amountAlreadyRemitted >= borrower.innitialBorrowAmount) {\\r\\n            borrower.isRepaid = true;\\r\\n        }\\r\\n\\r\\n        nftCollateral.unfreeze(borrower.nftCollateralTokenId);\\r\\n        emit LoanRepayed(\\r\\n            borrower.lenderId,\\r\\n            borrower.borrowerId,\\r\\n            lender.lender,\\r\\n            borrower.borrower,\\r\\n            msg.value\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // liquidateCollateral\\r\\n    /*\\r\\n     * Liquidate collateral\\r\\n     * puts nft on sale on the martkeplace\\r\\n     *\\r\\n     */\\r\\n    function liquidateCollateral(\\r\\n        uint256 _borrowerId,\\r\\n        bytes memory _saleType\\r\\n    ) public payable onlyOwner {\\r\\n        // check that loan is overdue\\r\\n        bytes32 theSaleType;\\r\\n\\r\\n        assembly {\\r\\n            theSaleType := mload(add(_saleType, 32))\\r\\n        }\\r\\n\\r\\n        bytes32 practicalSaleType = keccak256(abi.encode(theSaleType));\\r\\n\\r\\n        // if liquidation sale type is public\\r\\n        if (practicalSaleType == PUBLIC_SALE) {\\r\\n            // implement listing asset on the marketplace\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // implement private sale\\r\\n        _liquidateInPrivateSale(\\r\\n            _borrowers[_borrowerId].nftCollateralTokenId,\\r\\n            _borrowerId,\\r\\n            _borrowers[_borrowerId].lenderId\\r\\n        );\\r\\n\\r\\n        emit CollateralLiquidated(\\r\\n            _borrowers[_borrowerId].lenderId,\\r\\n            _borrowerId,\\r\\n            _lenders[_borrowers[_borrowerId].lenderId].lender,\\r\\n            _borrowers[_borrowerId].borrower,\\r\\n            _borrowers[_borrowerId].innitialBorrowAmount,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Liquidate private sale\\r\\n    /*\\r\\n     * unfreeze nft Collateral\\r\\n     * transfer nft value to liquidator\\r\\n     * repay lender\\r\\n     * exonerate borrower\\r\\n     */\\r\\n    function _liquidateInPrivateSale(\\r\\n        uint256 _nftCollateralTokenId,\\r\\n        uint256 _borrowerId,\\r\\n        uint256 _lenderId\\r\\n    ) private {\\r\\n        // unfreeze nft Collateral\\r\\n        nftCollateral.unfreeze(_nftCollateralTokenId);\\r\\n\\r\\n        Borrower storage borrower = _borrowers[_borrowerId];\\r\\n        Lender storage lender = _lenders[_lenderId];\\r\\n\\r\\n        // transfer nft value to liquidator\\r\\n        nftCollateral.safeTransferFrom(\\r\\n            borrower.borrower,\\r\\n            msg.sender,\\r\\n            _nftCollateralTokenId\\r\\n        );\\r\\n        // repay lender\\r\\n        lender.currentAvailableLendAmount += msg.value; //available lend amount\\r\\n        lender.amountRepaid += msg.value;\\r\\n\\r\\n        // exonerate borrower\\r\\n        borrower.currentBorrowAmount -= msg.value;\\r\\n        borrower.amountAlreadyRemitted += msg.value;\\r\\n    }\\r\\n\\r\\n    // cancelLoan\\r\\n    function cancelLoan(\\r\\n        uint256 _lenderId\\r\\n    ) public onlyLender(_lenders[_lenderId].lender) {\\r\\n        _lenders[_lenderId].isActive = false;\\r\\n        emit LoanCancelled(\\r\\n            _lenderId,\\r\\n            _lenders[_lenderId].lender,\\r\\n            _lenders[_lenderId].innitialLendAmount,\\r\\n            _lenders[_lenderId].isActive\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // update loan duration\\r\\n\\r\\n    // add more funds\\r\\n    function addfunds(\\r\\n        uint256 _loanId\\r\\n    ) public payable onlyLender(_lenders[_loanId].lender) {\\r\\n        Lender storage lender = _lenders[_loanId];\\r\\n        lender.currentAvailableLendAmount += msg.value;\\r\\n        lender.innitialLendAmount += msg.value;\\r\\n\\r\\n        emit FundsAdded(\\r\\n            lender.currentAvailableLendAmount,\\r\\n            lender.innitialLendAmount,\\r\\n            _lenders[_loanId].lender,\\r\\n            _loanId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // deactivate loan\\r\\n\\r\\n    function deActivateLoan(\\r\\n        uint256 _loanId\\r\\n    ) public payable onlyLender(_lenders[_loanId].lender) {\\r\\n        _lenders[_loanId].isActive = false;\\r\\n        _lenders[_loanId].locked = false;\\r\\n        emit LoanDeactivated(\\r\\n            _loanId,\\r\\n            _lenders[_loanId].isActive,\\r\\n            _lenders[_loanId].locked\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // fetch loan single\\r\\n    function fetchLoanSingle(\\r\\n        uint256 _loanId\\r\\n    ) public view returns (Lender memory) {\\r\\n        return _lenders[_loanId];\\r\\n    }\\r\\n\\r\\n    // fetch borrow single\\r\\n    function fetchBorrowSingle(\\r\\n        uint256 _borrowId\\r\\n    ) public view returns (Borrower memory) {\\r\\n        return _borrowers[_borrowId];\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x8008f73109852e6c467962395a4cb874eb09078b7b1592a24250c739b64e6e98\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600c600255600560035534801561001a57600080fd5b5060405162001b4638038062001b4683398101604081905261003b916100bd565b6100443361006d565b60018055600680546001600160a01b0319166001600160a01b03929092169190911790556100ed565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100cf57600080fd5b81516001600160a01b03811681146100e657600080fd5b9392505050565b611a4980620000fd6000396000f3fe6080604052600436106101175760003560e01c80638da5cb5b1161009a578063bd857bad11610061578063bd857bad146102e4578063bdbfa3de14610304578063d5622c7a14610324578063e6cb85a714610344578063f2fde38b1461035757005b80638da5cb5b1461024a57806398c83a161461027c578063aadc1ac114610291578063ab7b1c89146102b1578063b1032e75146102c457005b8063715018a6116100de578063715018a6146101cc5780637223be95146101e157806376a5213d1461020e57806386c1c74d146102215780638d8601421461023757005b80630fe41d2d146101205780631ec33cdd14610133578063242011d5146101695780635f89584e146101895780636e1b7925146101ac57005b3661011e57005b005b61011e61012e36600461167a565b610377565b34801561013f57600080fd5b5061015361014e36600461167a565b610439565b6040516101609190611693565b60405180910390f35b34801561017557600080fd5b5061011e610184366004611753565b610568565b34801561019557600080fd5b5061019e6108b9565b604051908152602001610160565b3480156101b857600080fd5b5061019e6101c736600461167a565b6108ed565b3480156101d857600080fd5b5061011e610902565b3480156101ed57600080fd5b506102016101fc36600461167a565b610916565b6040516101609190611794565b61011e61021c36600461167a565b610a23565b34801561022d57600080fd5b5061019e60035481565b61011e610245366004611824565b610b20565b34801561025657600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610160565b34801561028857600080fd5b5061019e610cad565b34801561029d57600080fd5b5061011e6102ac36600461167a565b610ccd565b61011e6102bf36600461167a565b610fc9565b3480156102d057600080fd5b5061019e6102df36600461167a565b611164565b3480156102f057600080fd5b50600654610264906001600160a01b031681565b34801561031057600080fd5b5061011e61031f36600461167a565b611171565b34801561033057600080fd5b5061019e61033f366004611824565b611233565b61011e610352366004611866565b61125f565b34801561036357600080fd5b5061011e610372366004611921565b6113a2565b600081815260076020819052604090912001546201000090046001600160a01b03163381146103c15760405162461bcd60e51b81526004016103b890611945565b60405180910390fd5b6000828152600760208190526040808320909101805461ffff19169081905590517f27b64ce9f7477631f2ac2d64d101b3f2520c671769b24b0dbfe7aad08f9ad87f9261042d92869261010090910460ff16919092835290151560208301521515604082015260600190565b60405180910390a15050565b6104b36040518061018001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000151581526020016000151581525090565b506000908152600860208181526040928390208351610180810185528154815260018201546001600160a01b03908116938201939093526002820154948101949094526003810154606085015260048101546080850152600581015460a0850152600681015460c0850152600781015460e08501529182015461010084015260099091015490811661012083015260ff600160a01b820481161515610140840152600160a81b90910416151561016082015290565b6001600160a01b03811633146105a257604051637c48fd7760e11b81523360048201526001600160a01b03821660248201526044016103b8565b60008481526007602081905260409091200154610100900460ff166105da57604051630417bc2360e11b815260040160405180910390fd5b6000848152600760208190526040909120015460ff1661060d5760405163088e7d9560e21b815260040160405180910390fd5b60008481526007602052604081206005810154600890910154610631918691611233565b61063b9085611986565b905061064b600480546001019055565b600061065660045490565b9050604051806101800160405280828152602001336001600160a01b0316815260200183815260200160008152602001600081526020016000815260200160008152602001878152602001858152602001336001600160a01b0316815260200160001515815260200160001515815250600860008381526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101408201518160090160146101000a81548160ff0219169083151502179055506101608201518160090160156101000a81548160ff0219169083151502179055509050507f2f2fa4b6641567f948e65b0a4104b370e8dd9766ee3b6cf99438b0f908df56356007600083815260200190815260200160002060000154600860008481526020019081526020016000206002015488600760008b815260200190815260200160002060070160029054906101000a90046001600160a01b03166008600087815260200190815260200160002060010160009054906101000a90046001600160a01b03166040516108a9959493929190948552602085019390935260408401919091526001600160a01b03908116606084015216608082015260a00190565b60405180910390a1505050505050565b6040516a5055424c49435f53414c4560a81b6020820152602b015b6040516020818303038152906040528051906020012081565b60006108fc8262093a8061199e565b92915050565b61090a611418565b6109146000611472565b565b6109806040518061016001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160001515815260200160006001600160a01b03168152602001600081525090565b50600090815260076020818152604092839020835161016081018552815481526001820154928101929092526002810154938201939093526003830154606082015260048301546080820152600583015460a0820152600683015460c08201529082015460ff808216151560e08401526101008083049091161515908301526201000090046001600160a01b031661012082015260089091015461014082015290565b600081815260076020819052604090912001546201000090046001600160a01b0316338114610a645760405162461bcd60e51b81526004016103b890611945565b600082815260076020526040812060028101805491923492610a87908490611986565b9250508190555034816001016000828254610aa29190611986565b90915550506002810154600182015460008581526007602081815260409283902090910154825194855290840192909252620100009091046001600160a01b031690820152606081018490527f0b6cf0e32a8f9281d882d68dd778489d19ecbfa2448d049fedda911c182320619060800160405180910390a1505050565b610b2e600580546001019055565b6000610b3960055490565b90506040518061016001604052808281526020013481526020013481526020016000815260200160008152602001858152602001848152602001600015158152602001600115158152602001336001600160a01b031681526020018360001415610ba557600254610ba7565b835b905260008281526007602081815260409283902084518155848201516001820181905585850151600283015560608087015160038401556080870151600484015560a0870151600584015560c0870151600684015560e08701519483018054610100808a01516101208b015161ffff1990931698151561ff00191698909817971515029690961762010000600160b01b031916620100006001600160a01b0397881681029190911791829055610140909801516008909401939093558551918252928101879052949004909116918301919091527f581f51c2b24b06d2a5e1f85b42d0d9cd4bb9506164d033f6146e21e35faa4aab91015b60405180910390a150505050565b6040516b505249564154455f53414c4560a01b6020820152602c016108d4565b610cd5611418565b610cdd6114c2565b600081815260086020526040902060098101546001600160a01b03163314610d2f576009810154604051637c48fd7760e11b81526001600160a01b0390911660048201523360248201526044016103b8565b60065460088201546040516331a9108f60e11b8152600481019190915233916001600160a01b031690636352211e9060240160206040518083038186803b158015610d7957600080fd5b505afa158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db191906119bd565b6001600160a01b031614610dfe5760405162461bcd60e51b815260206004820152601460248201527329b2b73232b9103737ba1027232a1037bbb732b960611b60448201526064016103b8565b6006546008820154604051631af4f1b760e31b81526001600160a01b039092169163d7a78db891610e359160040190815260200190565b600060405180830381600087803b158015610e4f57600080fd5b505af1158015610e63573d6000803e3d6000fd5b505050506000600760008360070154815260200190815260200160002090508160020154816002016000828254610e9a91906119da565b92505081905550610eb16101c78260080154611164565b610ebb9042611986565b60058301556002820154600383018054600090610ed9908490611986565b9091555050600282015460405160009133918381818185875af1925050503d8060008114610f23576040519150601f19603f3d011682016040523d82523d6000602084013e610f28565b606091505b5050905080610f4a576040516312171d8360e31b815260040160405180910390fd5b600783810154908301546001850154600286015460408051948552602085018990526001600160a01b03620100009094048416908501529116606083015260808201527f0da39fecb301ec545e02d61d98a1bbb25e3c0065143ab4f75a74de6cdee433809060a00160405180910390a1505050610fc660018055565b50565b610fd16114c2565b60008181526008602090815260408083206007808201548552909252822060028101805492939192349290611007908490611986565b92505081905550348160030160008282546110229190611986565b925050819055503482600401600082825461103d9190611986565b925050819055503482600301600082825461105891906119da565b909155505060028201546004830154106110825760098201805460ff60a81b1916600160a81b1790555b6006546008830154604051633311fe2360e11b81526001600160a01b0390921691636623fc46916110b99160040190815260200190565b600060405180830381600087803b1580156110d357600080fd5b505af11580156110e7573d6000803e3d6000fd5b505050506007828101548354918301546001850154604080519384526020840194909452620100009091046001600160a01b039081168385015216606082015234608082015290517f8cfb4bbbef6e38ab280adc35e23333873cabe942691efabeb31540edc752501b9181900360a00190a15050610fc660018055565b60006108fc82600461199e565b600081815260076020819052604090912001546201000090046001600160a01b03163381146111b25760405162461bcd60e51b81526004016103b890611945565b600082815260076020818152604092839020918201805461ff0019169081905560019092015483518681526001600160a01b03620100008504169281019290925292810192909252610100900460ff16151560608201527f684b62b7cc6184a3cefa229c2fff1fff4c2f15bdcb6f3eff86846abf05d932959060800161042d565b60006104b082611243858761199e565b61124d919061199e565b61125791906119f1565b949350505050565b611267611418565b60006020820151905060008160405160200161128591815260200190565b6040516020818303038152906040528051906020012090506040516020016112be906a5055424c49435f53414c4560a81b8152600b0190565b604051602081830303815290604052805190602001208114156112e15750505050565b6000848152600860208190526040909120908101546007909101546113089190869061151c565b600084815260086020818152604080842060078082015480875281855283872090910154958a905293835260018101546002909101548251948552928401899052620100009094046001600160a01b0390811691840191909152909216606082015260808101919091523360a08201527f87390dbcb6edae20b6a7cdc35a4c70b99cc1c4c9fe48a847226a3b647aea619f9060c001610c9f565b6113aa611418565b6001600160a01b03811661140f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103b8565b610fc681611472565b6000546001600160a01b031633146109145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103b8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015414156115155760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103b8565b6002600155565b600654604051633311fe2360e11b8152600481018590526001600160a01b0390911690636623fc4690602401600060405180830381600087803b15801561156257600080fd5b505af1158015611576573d6000803e3d6000fd5b505050600083815260086020908152604080832085845260079092529182902060065460018301549351632142170760e11b81526001600160a01b03948516600482015233602482015260448101899052929450909216906342842e0e90606401600060405180830381600087803b1580156115f157600080fd5b505af1158015611605573d6000803e3d6000fd5b505050503481600201600082825461161d9190611986565b92505081905550348160030160008282546116389190611986565b925050819055503482600301600082825461165391906119da565b925050819055503482600401600082825461166e9190611986565b90915550505050505050565b60006020828403121561168c57600080fd5b5035919050565b815181526020808301516101808301916116b7908401826001600160a01b03169052565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e08301526101008084015181840152506101208084015161171b828501826001600160a01b03169052565b505061014083810151151590830152610160928301511515929091019190915290565b6001600160a01b0381168114610fc657600080fd5b6000806000806080858703121561176957600080fd5b84359350602085013592506040850135915060608501356117898161173e565b939692955090935050565b600061016082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e08301516117f060e084018215159052565b5061010083810151151590830152610120808401516001600160a01b03169083015261014092830151929091019190915290565b60008060006060848603121561183957600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561187957600080fd5b82359150602083013567ffffffffffffffff8082111561189857600080fd5b818501915085601f8301126118ac57600080fd5b8135818111156118be576118be611850565b604051601f8201601f19908116603f011681019083821181831017156118e6576118e6611850565b816040528281528860208487010111156118ff57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561193357600080fd5b813561193e8161173e565b9392505050565b60208082526011908201527029b2b73232b9103737ba102632b73232b960791b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561199957611999611970565b500190565b60008160001904831182151516156119b8576119b8611970565b500290565b6000602082840312156119cf57600080fd5b815161193e8161173e565b6000828210156119ec576119ec611970565b500390565b600082611a0e57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220330d269346b9eeda5c5429baff8c404b46303f355832bde61a42ed07a9cb843164736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101175760003560e01c80638da5cb5b1161009a578063bd857bad11610061578063bd857bad146102e4578063bdbfa3de14610304578063d5622c7a14610324578063e6cb85a714610344578063f2fde38b1461035757005b80638da5cb5b1461024a57806398c83a161461027c578063aadc1ac114610291578063ab7b1c89146102b1578063b1032e75146102c457005b8063715018a6116100de578063715018a6146101cc5780637223be95146101e157806376a5213d1461020e57806386c1c74d146102215780638d8601421461023757005b80630fe41d2d146101205780631ec33cdd14610133578063242011d5146101695780635f89584e146101895780636e1b7925146101ac57005b3661011e57005b005b61011e61012e36600461167a565b610377565b34801561013f57600080fd5b5061015361014e36600461167a565b610439565b6040516101609190611693565b60405180910390f35b34801561017557600080fd5b5061011e610184366004611753565b610568565b34801561019557600080fd5b5061019e6108b9565b604051908152602001610160565b3480156101b857600080fd5b5061019e6101c736600461167a565b6108ed565b3480156101d857600080fd5b5061011e610902565b3480156101ed57600080fd5b506102016101fc36600461167a565b610916565b6040516101609190611794565b61011e61021c36600461167a565b610a23565b34801561022d57600080fd5b5061019e60035481565b61011e610245366004611824565b610b20565b34801561025657600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610160565b34801561028857600080fd5b5061019e610cad565b34801561029d57600080fd5b5061011e6102ac36600461167a565b610ccd565b61011e6102bf36600461167a565b610fc9565b3480156102d057600080fd5b5061019e6102df36600461167a565b611164565b3480156102f057600080fd5b50600654610264906001600160a01b031681565b34801561031057600080fd5b5061011e61031f36600461167a565b611171565b34801561033057600080fd5b5061019e61033f366004611824565b611233565b61011e610352366004611866565b61125f565b34801561036357600080fd5b5061011e610372366004611921565b6113a2565b600081815260076020819052604090912001546201000090046001600160a01b03163381146103c15760405162461bcd60e51b81526004016103b890611945565b60405180910390fd5b6000828152600760208190526040808320909101805461ffff19169081905590517f27b64ce9f7477631f2ac2d64d101b3f2520c671769b24b0dbfe7aad08f9ad87f9261042d92869261010090910460ff16919092835290151560208301521515604082015260600190565b60405180910390a15050565b6104b36040518061018001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000151581526020016000151581525090565b506000908152600860208181526040928390208351610180810185528154815260018201546001600160a01b03908116938201939093526002820154948101949094526003810154606085015260048101546080850152600581015460a0850152600681015460c0850152600781015460e08501529182015461010084015260099091015490811661012083015260ff600160a01b820481161515610140840152600160a81b90910416151561016082015290565b6001600160a01b03811633146105a257604051637c48fd7760e11b81523360048201526001600160a01b03821660248201526044016103b8565b60008481526007602081905260409091200154610100900460ff166105da57604051630417bc2360e11b815260040160405180910390fd5b6000848152600760208190526040909120015460ff1661060d5760405163088e7d9560e21b815260040160405180910390fd5b60008481526007602052604081206005810154600890910154610631918691611233565b61063b9085611986565b905061064b600480546001019055565b600061065660045490565b9050604051806101800160405280828152602001336001600160a01b0316815260200183815260200160008152602001600081526020016000815260200160008152602001878152602001858152602001336001600160a01b0316815260200160001515815260200160001515815250600860008381526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101408201518160090160146101000a81548160ff0219169083151502179055506101608201518160090160156101000a81548160ff0219169083151502179055509050507f2f2fa4b6641567f948e65b0a4104b370e8dd9766ee3b6cf99438b0f908df56356007600083815260200190815260200160002060000154600860008481526020019081526020016000206002015488600760008b815260200190815260200160002060070160029054906101000a90046001600160a01b03166008600087815260200190815260200160002060010160009054906101000a90046001600160a01b03166040516108a9959493929190948552602085019390935260408401919091526001600160a01b03908116606084015216608082015260a00190565b60405180910390a1505050505050565b6040516a5055424c49435f53414c4560a81b6020820152602b015b6040516020818303038152906040528051906020012081565b60006108fc8262093a8061199e565b92915050565b61090a611418565b6109146000611472565b565b6109806040518061016001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160001515815260200160006001600160a01b03168152602001600081525090565b50600090815260076020818152604092839020835161016081018552815481526001820154928101929092526002810154938201939093526003830154606082015260048301546080820152600583015460a0820152600683015460c08201529082015460ff808216151560e08401526101008083049091161515908301526201000090046001600160a01b031661012082015260089091015461014082015290565b600081815260076020819052604090912001546201000090046001600160a01b0316338114610a645760405162461bcd60e51b81526004016103b890611945565b600082815260076020526040812060028101805491923492610a87908490611986565b9250508190555034816001016000828254610aa29190611986565b90915550506002810154600182015460008581526007602081815260409283902090910154825194855290840192909252620100009091046001600160a01b031690820152606081018490527f0b6cf0e32a8f9281d882d68dd778489d19ecbfa2448d049fedda911c182320619060800160405180910390a1505050565b610b2e600580546001019055565b6000610b3960055490565b90506040518061016001604052808281526020013481526020013481526020016000815260200160008152602001858152602001848152602001600015158152602001600115158152602001336001600160a01b031681526020018360001415610ba557600254610ba7565b835b905260008281526007602081815260409283902084518155848201516001820181905585850151600283015560608087015160038401556080870151600484015560a0870151600584015560c0870151600684015560e08701519483018054610100808a01516101208b015161ffff1990931698151561ff00191698909817971515029690961762010000600160b01b031916620100006001600160a01b0397881681029190911791829055610140909801516008909401939093558551918252928101879052949004909116918301919091527f581f51c2b24b06d2a5e1f85b42d0d9cd4bb9506164d033f6146e21e35faa4aab91015b60405180910390a150505050565b6040516b505249564154455f53414c4560a01b6020820152602c016108d4565b610cd5611418565b610cdd6114c2565b600081815260086020526040902060098101546001600160a01b03163314610d2f576009810154604051637c48fd7760e11b81526001600160a01b0390911660048201523360248201526044016103b8565b60065460088201546040516331a9108f60e11b8152600481019190915233916001600160a01b031690636352211e9060240160206040518083038186803b158015610d7957600080fd5b505afa158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db191906119bd565b6001600160a01b031614610dfe5760405162461bcd60e51b815260206004820152601460248201527329b2b73232b9103737ba1027232a1037bbb732b960611b60448201526064016103b8565b6006546008820154604051631af4f1b760e31b81526001600160a01b039092169163d7a78db891610e359160040190815260200190565b600060405180830381600087803b158015610e4f57600080fd5b505af1158015610e63573d6000803e3d6000fd5b505050506000600760008360070154815260200190815260200160002090508160020154816002016000828254610e9a91906119da565b92505081905550610eb16101c78260080154611164565b610ebb9042611986565b60058301556002820154600383018054600090610ed9908490611986565b9091555050600282015460405160009133918381818185875af1925050503d8060008114610f23576040519150601f19603f3d011682016040523d82523d6000602084013e610f28565b606091505b5050905080610f4a576040516312171d8360e31b815260040160405180910390fd5b600783810154908301546001850154600286015460408051948552602085018990526001600160a01b03620100009094048416908501529116606083015260808201527f0da39fecb301ec545e02d61d98a1bbb25e3c0065143ab4f75a74de6cdee433809060a00160405180910390a1505050610fc660018055565b50565b610fd16114c2565b60008181526008602090815260408083206007808201548552909252822060028101805492939192349290611007908490611986565b92505081905550348160030160008282546110229190611986565b925050819055503482600401600082825461103d9190611986565b925050819055503482600301600082825461105891906119da565b909155505060028201546004830154106110825760098201805460ff60a81b1916600160a81b1790555b6006546008830154604051633311fe2360e11b81526001600160a01b0390921691636623fc46916110b99160040190815260200190565b600060405180830381600087803b1580156110d357600080fd5b505af11580156110e7573d6000803e3d6000fd5b505050506007828101548354918301546001850154604080519384526020840194909452620100009091046001600160a01b039081168385015216606082015234608082015290517f8cfb4bbbef6e38ab280adc35e23333873cabe942691efabeb31540edc752501b9181900360a00190a15050610fc660018055565b60006108fc82600461199e565b600081815260076020819052604090912001546201000090046001600160a01b03163381146111b25760405162461bcd60e51b81526004016103b890611945565b600082815260076020818152604092839020918201805461ff0019169081905560019092015483518681526001600160a01b03620100008504169281019290925292810192909252610100900460ff16151560608201527f684b62b7cc6184a3cefa229c2fff1fff4c2f15bdcb6f3eff86846abf05d932959060800161042d565b60006104b082611243858761199e565b61124d919061199e565b61125791906119f1565b949350505050565b611267611418565b60006020820151905060008160405160200161128591815260200190565b6040516020818303038152906040528051906020012090506040516020016112be906a5055424c49435f53414c4560a81b8152600b0190565b604051602081830303815290604052805190602001208114156112e15750505050565b6000848152600860208190526040909120908101546007909101546113089190869061151c565b600084815260086020818152604080842060078082015480875281855283872090910154958a905293835260018101546002909101548251948552928401899052620100009094046001600160a01b0390811691840191909152909216606082015260808101919091523360a08201527f87390dbcb6edae20b6a7cdc35a4c70b99cc1c4c9fe48a847226a3b647aea619f9060c001610c9f565b6113aa611418565b6001600160a01b03811661140f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103b8565b610fc681611472565b6000546001600160a01b031633146109145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103b8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015414156115155760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103b8565b6002600155565b600654604051633311fe2360e11b8152600481018590526001600160a01b0390911690636623fc4690602401600060405180830381600087803b15801561156257600080fd5b505af1158015611576573d6000803e3d6000fd5b505050600083815260086020908152604080832085845260079092529182902060065460018301549351632142170760e11b81526001600160a01b03948516600482015233602482015260448101899052929450909216906342842e0e90606401600060405180830381600087803b1580156115f157600080fd5b505af1158015611605573d6000803e3d6000fd5b505050503481600201600082825461161d9190611986565b92505081905550348160030160008282546116389190611986565b925050819055503482600301600082825461165391906119da565b925050819055503482600401600082825461166e9190611986565b90915550505050505050565b60006020828403121561168c57600080fd5b5035919050565b815181526020808301516101808301916116b7908401826001600160a01b03169052565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e08301526101008084015181840152506101208084015161171b828501826001600160a01b03169052565b505061014083810151151590830152610160928301511515929091019190915290565b6001600160a01b0381168114610fc657600080fd5b6000806000806080858703121561176957600080fd5b84359350602085013592506040850135915060608501356117898161173e565b939692955090935050565b600061016082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e08301516117f060e084018215159052565b5061010083810151151590830152610120808401516001600160a01b03169083015261014092830151929091019190915290565b60008060006060848603121561183957600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561187957600080fd5b82359150602083013567ffffffffffffffff8082111561189857600080fd5b818501915085601f8301126118ac57600080fd5b8135818111156118be576118be611850565b604051601f8201601f19908116603f011681019083821181831017156118e6576118e6611850565b816040528281528860208487010111156118ff57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561193357600080fd5b813561193e8161173e565b9392505050565b60208082526011908201527029b2b73232b9103737ba102632b73232b960791b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561199957611999611970565b500190565b60008160001904831182151516156119b8576119b8611970565b500290565b6000602082840312156119cf57600080fd5b815161193e8161173e565b6000828210156119ec576119ec611970565b500390565b600082611a0e57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220330d269346b9eeda5c5429baff8c404b46303f355832bde61a42ed07a9cb843164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/Loan.sol:Loan",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4176,
        "contract": "contracts/Loan.sol:Loan",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13668,
        "contract": "contracts/Loan.sol:Loan",
        "label": "_defaultLoanDuration",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 13671,
        "contract": "contracts/Loan.sol:Loan",
        "label": "defaultInterestRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 13694,
        "contract": "contracts/Loan.sol:Loan",
        "label": "_borrowersIds",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)9218_storage"
      },
      {
        "astId": 13697,
        "contract": "contracts/Loan.sol:Loan",
        "label": "_lendersIds",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Counter)9218_storage"
      },
      {
        "astId": 13700,
        "contract": "contracts/Loan.sol:Loan",
        "label": "nftCollateral",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(Fisch)13655"
      },
      {
        "astId": 13876,
        "contract": "contracts/Loan.sol:Loan",
        "label": "_lenders",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Lender)13734_storage)"
      },
      {
        "astId": 13881,
        "contract": "contracts/Loan.sol:Loan",
        "label": "_borrowers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Borrower)13759_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Fisch)13655": {
        "encoding": "inplace",
        "label": "contract Fisch",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Borrower)13759_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Loan.Borrower)",
        "numberOfBytes": "32",
        "value": "t_struct(Borrower)13759_storage"
      },
      "t_mapping(t_uint256,t_struct(Lender)13734_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Loan.Lender)",
        "numberOfBytes": "32",
        "value": "t_struct(Lender)13734_storage"
      },
      "t_struct(Borrower)13759_storage": {
        "encoding": "inplace",
        "label": "struct Loan.Borrower",
        "members": [
          {
            "astId": 13736,
            "contract": "contracts/Loan.sol:Loan",
            "label": "borrowerId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13738,
            "contract": "contracts/Loan.sol:Loan",
            "label": "borrower",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 13740,
            "contract": "contracts/Loan.sol:Loan",
            "label": "innitialBorrowAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13742,
            "contract": "contracts/Loan.sol:Loan",
            "label": "currentBorrowAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13744,
            "contract": "contracts/Loan.sol:Loan",
            "label": "amountAlreadyRemitted",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13746,
            "contract": "contracts/Loan.sol:Loan",
            "label": "deadline",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13748,
            "contract": "contracts/Loan.sol:Loan",
            "label": "interest",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 13750,
            "contract": "contracts/Loan.sol:Loan",
            "label": "lenderId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 13752,
            "contract": "contracts/Loan.sol:Loan",
            "label": "nftCollateralTokenId",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 13754,
            "contract": "contracts/Loan.sol:Loan",
            "label": "receiverAddress",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          },
          {
            "astId": 13756,
            "contract": "contracts/Loan.sol:Loan",
            "label": "isApproved",
            "offset": 20,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 13758,
            "contract": "contracts/Loan.sol:Loan",
            "label": "isRepaid",
            "offset": 21,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Counter)9218_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 9217,
            "contract": "contracts/Loan.sol:Loan",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Lender)13734_storage": {
        "encoding": "inplace",
        "label": "struct Loan.Lender",
        "members": [
          {
            "astId": 13713,
            "contract": "contracts/Loan.sol:Loan",
            "label": "loanId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13715,
            "contract": "contracts/Loan.sol:Loan",
            "label": "innitialLendAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13717,
            "contract": "contracts/Loan.sol:Loan",
            "label": "currentAvailableLendAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13719,
            "contract": "contracts/Loan.sol:Loan",
            "label": "amountRepaid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13721,
            "contract": "contracts/Loan.sol:Loan",
            "label": "borrowerId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13723,
            "contract": "contracts/Loan.sol:Loan",
            "label": "interestRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13725,
            "contract": "contracts/Loan.sol:Loan",
            "label": "loanOutDuration",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 13727,
            "contract": "contracts/Loan.sol:Loan",
            "label": "locked",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 13729,
            "contract": "contracts/Loan.sol:Loan",
            "label": "isActive",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 13731,
            "contract": "contracts/Loan.sol:Loan",
            "label": "lender",
            "offset": 2,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 13733,
            "contract": "contracts/Loan.sol:Loan",
            "label": "loanDurationInMonthCount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}