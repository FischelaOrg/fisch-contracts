{
  "address": "0xc665F05f7821761aeDaf4EecB4672AC967CCe45a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Fisch",
          "name": "_nftCollateralAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LoanIsLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LoanNotActive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "SenderNotReceiver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "CollateralLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentAvailableLendAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "innitialLendAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "FundsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LoanApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "LoanBorrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "LoanCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "LoanCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "name": "LoanLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LoanRepayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "name": "LoanUnLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "PRIVATE_SALE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_SALE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "addfunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_borrowerId",
          "type": "uint256"
        }
      ],
      "name": "approveLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lenderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nftCollateralTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pricipalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "durationMonths",
          "type": "uint256"
        }
      ],
      "name": "calculateLoanInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "si",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lenderId",
          "type": "uint256"
        }
      ],
      "name": "cancelLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_noOfMonth",
          "type": "uint256"
        }
      ],
      "name": "convertMonthsToSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "secondsByMonth",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_noOfMonth",
          "type": "uint256"
        }
      ],
      "name": "convertMonthsToWeeks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "noOfweeks",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "noOfWeeks",
          "type": "uint256"
        }
      ],
      "name": "convertWeeksToSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "secondsByWeeks",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loanDurationMonthCount",
          "type": "uint256"
        }
      ],
      "name": "createOrListLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_borrowId",
          "type": "uint256"
        }
      ],
      "name": "fetchBorrowSingle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "borrowerId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "innitialBorrowAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentBorrowAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAlreadyRemitted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lenderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftCollateralTokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiverAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isApproved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRepaid",
              "type": "bool"
            }
          ],
          "internalType": "struct Loan.Borrower",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "fetchLoanSingle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "loanId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "innitialLendAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentAvailableLendAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountRepaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loanOutDuration",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "locked",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "loanDurationInMonthCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Lender",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_borrowerId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_saleType",
          "type": "string"
        }
      ],
      "name": "liquidateCollateral",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "lockLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftCollateral",
      "outputs": [
        {
          "internalType": "contract Fisch",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_borrowerId",
          "type": "uint256"
        }
      ],
      "name": "repayLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "unlockLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5f3290c47fc17264d683b08e291c49f491ebd4acbf73da1e4116cfe0e81a9730",
  "receipt": {
    "to": null,
    "from": "0xd6658b718B0AE012B62997b5eF9E4DA7Bd3Aa66E",
    "contractAddress": "0xc665F05f7821761aeDaf4EecB4672AC967CCe45a",
    "transactionIndex": 4,
    "gasUsed": "1963067",
    "logsBloom": "0x
    "blockHash": "0x3834f403738f56399246ec93f72758c88a7de886678640fbe9766dec387735d1",
    "transactionHash": "0x5f3290c47fc17264d683b08e291c49f491ebd4acbf73da1e4116cfe0e81a9730",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 36054529,
        "transactionHash": "0x5f3290c47fc17264d683b08e291c49f491ebd4acbf73da1e4116cfe0e81a9730",
        "address": "0xc665F05f7821761aeDaf4EecB4672AC967CCe45a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d6658b718b0ae012b62997b5ef9e4da7bd3aa66e"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x3834f403738f56399246ec93f72758c88a7de886678640fbe9766dec387735d1"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 36054529,
        "transactionHash": "0x5f3290c47fc17264d683b08e291c49f491ebd4acbf73da1e4116cfe0e81a9730",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d6658b718b0ae012b62997b5ef9e4da7bd3aa66e",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001c9822d211cf5000000000000000000000000000000000000000000000000019518dda1cacc0400000000000000000000000000000000000000000000009aa94b8e5532c109dc60000000000000000000000000000000000000000000000001934f5b74a9af0f00000000000000000000000000000000000000000000009aa94d57d75fe226d16",
        "logIndex": 19,
        "blockHash": "0x3834f403738f56399246ec93f72758c88a7de886678640fbe9766dec387735d1"
      }
    ],
    "blockNumber": 36054529,
    "cumulativeGasUsed": "2441321",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x509815B83b091d86f76919F7f5891a2E48545798"
  ],
  "numDeployments": 2,
  "solcInputHash": "7f362f68259767045c94503a70211b54",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Fisch\",\"name\":\"_nftCollateralAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LoanIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LoanNotActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SenderNotReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"CollateralLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentAvailableLendAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"innitialLendAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"FundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LoanApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"LoanBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"LoanCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"LoanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"LoanLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LoanRepayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"LoanUnLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_SALE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"addfunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowerId\",\"type\":\"uint256\"}],\"name\":\"approveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lenderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftCollateralTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pricipalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationMonths\",\"type\":\"uint256\"}],\"name\":\"calculateLoanInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"si\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lenderId\",\"type\":\"uint256\"}],\"name\":\"cancelLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_noOfMonth\",\"type\":\"uint256\"}],\"name\":\"convertMonthsToSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"secondsByMonth\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_noOfMonth\",\"type\":\"uint256\"}],\"name\":\"convertMonthsToWeeks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"noOfweeks\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"noOfWeeks\",\"type\":\"uint256\"}],\"name\":\"convertWeeksToSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"secondsByWeeks\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanDurationMonthCount\",\"type\":\"uint256\"}],\"name\":\"createOrListLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowId\",\"type\":\"uint256\"}],\"name\":\"fetchBorrowSingle\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"borrowerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"innitialBorrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBorrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAlreadyRemitted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lenderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftCollateralTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRepaid\",\"type\":\"bool\"}],\"internalType\":\"struct Loan.Borrower\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"fetchLoanSingle\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"innitialLendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAvailableLendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRepaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanOutDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanDurationInMonthCount\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Lender\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowerId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_saleType\",\"type\":\"string\"}],\"name\":\"liquidateCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"lockLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftCollateral\",\"outputs\":[{\"internalType\":\"contract Fisch\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowerId\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"unlockLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Loan.sol\":\"Loan\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Fisch.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\ncontract Fisch is ERC721URIStorage, ReentrancyGuard, Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    using Strings for uint256;\\r\\n    string public baseURI;\\r\\n\\r\\n    error AssetIsFrozen(uint256 tokenId);\\r\\n\\r\\n    // EVENTS\\r\\n    event MintedNft(\\r\\n        address indexed owner,\\r\\n        string ttile,\\r\\n        string description,\\r\\n        uint256 tokenId,\\r\\n        string assetURI,\\r\\n        uint256 price,\\r\\n        uint256 revenue,\\r\\n        uint256 expenses,\\r\\n        uint256 traffic,\\r\\n        string productLink\\r\\n    );\\r\\n\\r\\n    event AssetPromotedToCollateral(uint256 _tokenId);\\r\\n\\r\\n    struct DigitalAsset {\\r\\n        address owner;\\r\\n        string title;\\r\\n        string description;\\r\\n        uint256 tokenId;\\r\\n        uint256 price;\\r\\n        string assetURI;\\r\\n        uint256 revenue;\\r\\n        uint256 expenses;\\r\\n        uint256 traffic;\\r\\n        string productLink;\\r\\n        bool isFrozen;\\r\\n        string ownerEmail;\\r\\n        bool isCollateral;\\r\\n    }\\r\\n\\r\\n    struct DigiAssetInput {\\r\\n        string title;\\r\\n        string description;\\r\\n        uint256 price;\\r\\n        string assetURI;\\r\\n        uint256 revenue;\\r\\n        uint256 expenses;\\r\\n        uint256 traffic;\\r\\n        string productLink;\\r\\n        string ownerEmail;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => DigitalAsset) public digitalAssets;\\r\\n\\r\\n    constructor() ERC721(\\\"Fischela\\\", \\\"FIS\\\") {\\r\\n        _transferOwnership(msg.sender);\\r\\n    }\\r\\n\\r\\n    function mintNFT(DigiAssetInput memory digi) public returns (uint256) {\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n        digitalAssets[tokenId] = DigitalAsset({\\r\\n            owner: msg.sender,\\r\\n            title: digi.title,\\r\\n            description: digi.description,\\r\\n            tokenId: tokenId,\\r\\n            price: digi.price,\\r\\n            assetURI: digi.assetURI,\\r\\n            revenue: digi.revenue,\\r\\n            expenses: digi.expenses,\\r\\n            traffic: digi.traffic,\\r\\n            productLink: digi.productLink,\\r\\n            isFrozen: false,\\r\\n            ownerEmail: digi.ownerEmail,\\r\\n            isCollateral: false\\r\\n        });\\r\\n\\r\\n        _safeMint(msg.sender, tokenId);\\r\\n        _setTokenURI(tokenId, digi.assetURI);\\r\\n        emit MintedNft(\\r\\n            msg.sender,\\r\\n            digi.title,\\r\\n            digi.description,\\r\\n            tokenId,\\r\\n            digi.assetURI,\\r\\n            digi.price,\\r\\n            digi.revenue,\\r\\n            digi.expenses,\\r\\n            digi.traffic,\\r\\n            digi.productLink\\r\\n        );\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(\\r\\n        string memory _baseURIStr //  onlyOwner\\r\\n    ) public {\\r\\n        baseURI = _baseURIStr;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    function setPriceDigitalAsset(uint256 _price, uint256 tokenId) public {\\r\\n        digitalAssets[tokenId].price = _price;\\r\\n    }\\r\\n\\r\\n    function getNftItem(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (DigitalAsset memory) {\\r\\n        return digitalAssets[_tokenId];\\r\\n    }\\r\\n\\r\\n    function freeze(uint256 _tokenId) public {\\r\\n        digitalAssets[_tokenId].isFrozen = true;\\r\\n    }\\r\\n\\r\\n    function unfreeze(uint256 _tokenId) public {\\r\\n        digitalAssets[_tokenId].isFrozen = false;\\r\\n    }\\r\\n\\r\\n    function safeTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) public nonReentrant {\\r\\n        _safeTransfer(_from, _to, _tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId,\\r\\n        bytes memory data\\r\\n    ) public virtual override {\\r\\n        if (digitalAssets[_tokenId].isFrozen) {\\r\\n            revert AssetIsFrozen(_tokenId);\\r\\n        }\\r\\n        super.safeTransferFrom(_from, _to, _tokenId, data);\\r\\n    }\\r\\n\\r\\n    function makeNftCollateral(uint256 _tokenId) public onlyOwner {\\r\\n        DigitalAsset storage digi = digitalAssets[_tokenId];\\r\\n        digi.isCollateral = true;\\r\\n\\r\\n        emit AssetPromotedToCollateral(_tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5b42950d05465f849a5499632bf533d27098ad80b2b470b071645eaad343aae6\",\"license\":\"UNLICENSED\"},\"contracts/Loan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./Fisch.sol\\\";\\r\\n\\r\\n\\r\\ncontract Loan is Ownable, ReentrancyGuard {\\r\\n    // default loan duration\\r\\n    using SafeMath for uint256;\\r\\n    uint256 private _defaultLoanDuration = 12;\\r\\n    uint256 public defaultInterestRate = 5;\\r\\n    bytes32 public constant PUBLIC_SALE =\\r\\n        keccak256(abi.encodePacked(\\\"PUBLIC_SALE\\\"));\\r\\n    bytes32 public constant PRIVATE_SALE =\\r\\n        keccak256(abi.encodePacked(\\\"PRIVATE_SALE\\\"));\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _borrowersIds;\\r\\n    Counters.Counter private _lendersIds;\\r\\n    Fisch public nftCollateral;\\r\\n\\r\\n    constructor(Fisch _nftCollateralAddress) {\\r\\n        nftCollateral = _nftCollateralAddress;\\r\\n    }\\r\\n\\r\\n    // create a struct for Lenders\\r\\n    struct Lender {\\r\\n        uint256 loanId;\\r\\n        uint256 innitialLendAmount;\\r\\n        uint256 currentAvailableLendAmount;\\r\\n        uint256 amountRepaid;\\r\\n        uint256 borrowerId;\\r\\n        uint256 interestRate; // using compound interest SI = PRT/100 to calculate interest rate\\r\\n        uint256 loanOutDuration;\\r\\n        bool locked;\\r\\n        bool isActive;\\r\\n        address lender;\\r\\n        uint256 loanDurationInMonthCount;\\r\\n    }\\r\\n\\r\\n    // create a struct for borowers\\r\\n    struct Borrower {\\r\\n        uint256 borrowerId;\\r\\n        address borrower;\\r\\n        uint256 innitialBorrowAmount;\\r\\n        uint256 currentBorrowAmount;\\r\\n        uint256 amountAlreadyRemitted;\\r\\n        uint256 deadline;\\r\\n        uint256 interest;\\r\\n        uint256 lenderId;\\r\\n        uint256 nftCollateralTokenId;\\r\\n        address receiverAddress;\\r\\n        bool isApproved;\\r\\n        bool isRepaid;\\r\\n    }\\r\\n\\r\\n    // events\\r\\n\\r\\n    event LoanCreated(uint256 amount, uint256 lenderId, address lender);\\r\\n\\r\\n    event LoanBorrowed(\\r\\n        uint256 borrowId,\\r\\n        uint256 amount,\\r\\n        uint256 lenderId,\\r\\n        address lender,\\r\\n        address borrower\\r\\n    );\\r\\n\\r\\n    event LoanApproved(\\r\\n        uint256 lenderId,\\r\\n        uint256 borrowerId,\\r\\n        address lender,\\r\\n        address borrower,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event LoanRepayed(\\r\\n        uint256 lenderId,\\r\\n        uint256 borrowerId,\\r\\n        address lender,\\r\\n        address borrower,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event CollateralLiquidated(\\r\\n        uint256 lenderId,\\r\\n        uint256 borrowerId,\\r\\n        address lender,\\r\\n        address borrower,\\r\\n        uint256 amount,\\r\\n        address liquidator\\r\\n    );\\r\\n\\r\\n    event LoanCancelled(\\r\\n        uint256 lenderId,\\r\\n        address lender,\\r\\n        uint256 amount,\\r\\n        bool isActive\\r\\n    );\\r\\n\\r\\n    event FundsAdded(\\r\\n        uint256 currentAvailableLendAmount,\\r\\n        uint256 innitialLendAmount,\\r\\n        address lender,\\r\\n        uint256 loanId\\r\\n    );\\r\\n    event LoanUnLocked(uint256 loanId, bool locked);\\r\\n    event LoanLocked(uint256 loanId, bool locked);\\r\\n\\r\\n    // errors\\r\\n\\r\\n    error SenderNotReceiver(address sender, address receiver);\\r\\n    error LoanNotActive();\\r\\n    error TransferFailed();\\r\\n    error LoanIsLocked();\\r\\n\\r\\n    // modifiers\\r\\n    modifier onlyLender(address _lender) {\\r\\n        require(msg.sender == _lender, \\\"Sender not Lender\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyWhenOverdue(uint256 _borrowerId) {\\r\\n        Borrower memory borrower = _borrowers[_borrowerId];\\r\\n        require(block.timestamp > borrower.deadline, \\\"Loan is not overdue\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // create a list of lenders\\r\\n\\r\\n    mapping(uint256 => Lender) private _lenders;\\r\\n\\r\\n    // create a list of borrrowers\\r\\n\\r\\n    mapping(uint256 => Borrower) private _borrowers;\\r\\n\\r\\n    // createLoan\\r\\n    function createOrListLoan(\\r\\n        uint256 _interestRate,\\r\\n        uint256 _loanDurationMonthCount\\r\\n    ) public payable {\\r\\n        // create Loan\\r\\n        _lendersIds.increment();\\r\\n\\r\\n        uint256 currentCounter = _lendersIds.current();\\r\\n        _lenders[currentCounter] = Lender({\\r\\n            loanId: currentCounter,\\r\\n            currentAvailableLendAmount: msg.value,\\r\\n            amountRepaid: 0,\\r\\n            locked: false,\\r\\n            isActive: true,\\r\\n            lender: msg.sender,\\r\\n            innitialLendAmount: msg.value,\\r\\n            interestRate: _interestRate,\\r\\n            loanOutDuration: convertMonthsToSeconds(\\r\\n                _loanDurationMonthCount != 0\\r\\n                    ? _loanDurationMonthCount\\r\\n                    : _defaultLoanDuration\\r\\n            ),\\r\\n            borrowerId: 0,\\r\\n            loanDurationInMonthCount: _loanDurationMonthCount != 0\\r\\n                ? _loanDurationMonthCount\\r\\n                : _defaultLoanDuration\\r\\n        });\\r\\n\\r\\n        emit LoanCreated(\\r\\n            _lenders[currentCounter].innitialLendAmount,\\r\\n            currentCounter,\\r\\n            _lenders[currentCounter].lender\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // calculate simple interest\\r\\n    function calculateLoanInterest(\\r\\n        uint256 pricipalAmount,\\r\\n        uint256 interestRate,\\r\\n        uint256 durationMonths\\r\\n    ) public pure returns (uint256 si) {\\r\\n        return\\r\\n            si = (pricipalAmount * interestRate * durationMonths) / (100 * 12);\\r\\n    }\\r\\n\\r\\n    // convert months to weeks\\r\\n    function convertMonthsToWeeks(\\r\\n        uint256 _noOfMonth\\r\\n    ) public pure returns (uint256 noOfweeks) {\\r\\n        return noOfweeks = 4 * _noOfMonth;\\r\\n    }\\r\\n\\r\\n    function convertWeeksToSeconds(\\r\\n        uint256 noOfWeeks\\r\\n    ) public pure returns (uint256 secondsByWeeks) {\\r\\n        return secondsByWeeks = noOfWeeks * 1 weeks;\\r\\n    }\\r\\n\\r\\n    function convertMonthsToSeconds(\\r\\n        uint256 _noOfMonth\\r\\n    ) public pure returns (uint256 secondsByMonth) {\\r\\n        uint256 weekds = convertMonthsToWeeks(_noOfMonth);\\r\\n        secondsByMonth = convertWeeksToSeconds(weekds);\\r\\n    }\\r\\n\\r\\n    // first create a function to borrow all\\r\\n    // Borrow\\r\\n\\r\\n    function borrow(\\r\\n        uint256 _lenderId,\\r\\n        uint256 _borrowAmount,\\r\\n        uint256 _nftCollateralTokenId,\\r\\n        address receiverAddress\\r\\n    ) public {\\r\\n        // check if receiver address equals msg.sender\\r\\n        if (receiverAddress != msg.sender) {\\r\\n            revert SenderNotReceiver(msg.sender, receiverAddress);\\r\\n        }\\r\\n\\r\\n        if (!_lenders[_lenderId].isActive) {\\r\\n            revert LoanNotActive();\\r\\n        }\\r\\n\\r\\n        if (_lenders[_lenderId].locked) {\\r\\n            revert LoanIsLocked();\\r\\n        }\\r\\n\\r\\n        // calculate amount to be repayed\\r\\n\\r\\n        // create Loan\\r\\n        _borrowersIds.increment();\\r\\n        uint256 currentCounter = _borrowersIds.current();\\r\\n        _borrowers[currentCounter] = Borrower({\\r\\n            borrowerId: currentCounter,\\r\\n            borrower: msg.sender,\\r\\n            currentBorrowAmount: 0,\\r\\n            innitialBorrowAmount: _borrowAmount,\\r\\n            amountAlreadyRemitted: 0,\\r\\n            deadline: 0,\\r\\n            interest: 0,\\r\\n            lenderId: _lenderId,\\r\\n            nftCollateralTokenId: _nftCollateralTokenId,\\r\\n            receiverAddress: msg.sender,\\r\\n            isApproved: false,\\r\\n            isRepaid: false\\r\\n        });\\r\\n\\r\\n        emit LoanBorrowed(\\r\\n            _lenders[currentCounter].loanId,\\r\\n            _borrowers[currentCounter].innitialBorrowAmount,\\r\\n            _lenderId,\\r\\n            _lenders[_lenderId].lender,\\r\\n            _borrowers[currentCounter].borrower\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // approveLoan\\r\\n    /*\\r\\n        - approve loan verifies receiver\\r\\n        - freezes nft collateral\\r\\n        - transfers loan to borrower\\r\\n     */\\r\\n    function approveLoan(uint256 _borrowerId) public nonReentrant {\\r\\n        Borrower storage borrower = _borrowers[_borrowerId];\\r\\n        Lender storage lender = _lenders[borrower.lenderId];\\r\\n\\r\\n        if (\\r\\n            nftCollateral.ownerOf(borrower.nftCollateralTokenId) !=\\r\\n            borrower.borrower\\r\\n        ) {\\r\\n            revert(\\\"Borrower not NFT owner\\\");\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            nftCollateral.getNftItem(borrower.nftCollateralTokenId).isCollateral\\r\\n        ) {\\r\\n            revert(\\\"NFT Is not Eligible as a Collateral\\\");\\r\\n        }\\r\\n\\r\\n        if (lender.currentAvailableLendAmount < borrower.innitialBorrowAmount) {\\r\\n            revert(\\\"Not enough cash for Loan\\\");\\r\\n        }\\r\\n\\r\\n        // freeze NFT\\r\\n        nftCollateral.freeze(borrower.nftCollateralTokenId);\\r\\n\\r\\n       \\r\\n        // deduct loan amount from lender\\r\\n        lender.currentAvailableLendAmount = lender\\r\\n            .currentAvailableLendAmount\\r\\n            .sub(borrower.innitialBorrowAmount);\\r\\n\\r\\n        // set loan deadline\\r\\n        borrower.deadline = block.timestamp.add(\\r\\n            convertMonthsToSeconds(lender.loanDurationInMonthCount)\\r\\n        );\\r\\n\\r\\n        // add loan amount to borrower\\r\\n        borrower.currentBorrowAmount = borrower.currentBorrowAmount.add(\\r\\n            borrower.innitialBorrowAmount\\r\\n        );\\r\\n        borrower.isApproved = true;\\r\\n\\r\\n        // transfer loan to msgSender\\r\\n        (bool success, ) = msg.sender.call{\\r\\n            value: borrower.innitialBorrowAmount\\r\\n        }(\\\"\\\");\\r\\n\\r\\n        borrower.innitialBorrowAmount = borrower.innitialBorrowAmount.add(\\r\\n            calculateLoanInterest(\\r\\n                borrower.innitialBorrowAmount,\\r\\n                lender.interestRate,\\r\\n                lender.loanDurationInMonthCount\\r\\n            )\\r\\n        );\\r\\n\\r\\n        if (!success) {\\r\\n            revert TransferFailed();\\r\\n        }\\r\\n        emit LoanApproved(\\r\\n            borrower.lenderId,\\r\\n            _borrowerId,\\r\\n            lender.lender,\\r\\n            borrower.borrower,\\r\\n            borrower.innitialBorrowAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // repayLoan ---- monthly repayment of loans\\r\\n    /*\\r\\n     * Repay loan\\r\\n     * checks if current amount repays all the loan\\r\\n     * transfers amount to lender\\r\\n     * exonerates borrower\\r\\n     */\\r\\n    function repayLoan(uint256 _borrowerId) public payable nonReentrant {\\r\\n        // check if current msg.value repays loan\\r\\n        Borrower storage borrower = _borrowers[_borrowerId];\\r\\n        Lender storage lender = _lenders[borrower.lenderId];\\r\\n        if (msg.value > borrower.currentBorrowAmount) {}\\r\\n\\r\\n        // transfer amount to lender\\r\\n        lender.currentAvailableLendAmount += msg.value;\\r\\n        lender.amountRepaid += msg.value;\\r\\n\\r\\n        // exonerate borrower\\r\\n        borrower.amountAlreadyRemitted += msg.value;\\r\\n        if (msg.value > borrower.currentBorrowAmount) {\\r\\n            borrower.currentBorrowAmount = 0;\\r\\n        }\\r\\n\\r\\n        if (msg.value <= borrower.currentBorrowAmount) {\\r\\n            borrower.currentBorrowAmount -= msg.value;\\r\\n        }\\r\\n\\r\\n        if (borrower.amountAlreadyRemitted >= borrower.innitialBorrowAmount) {\\r\\n            borrower.isRepaid = true;\\r\\n        }\\r\\n\\r\\n        nftCollateral.unfreeze(borrower.nftCollateralTokenId);\\r\\n        emit LoanRepayed(\\r\\n            borrower.lenderId,\\r\\n            borrower.borrowerId,\\r\\n            lender.lender,\\r\\n            borrower.borrower,\\r\\n            msg.value\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // liquidateCollateral\\r\\n    /*\\r\\n     * Liquidate collateral\\r\\n     * puts nft on sale on the martkeplace\\r\\n     *\\r\\n     */\\r\\n    function liquidateCollateral(\\r\\n        uint256 _borrowerId,\\r\\n        string memory _saleType\\r\\n    ) public payable onlyWhenOverdue(_borrowerId) {\\r\\n        // check that loan is overdue\\r\\n\\r\\n        bytes32 practicalSaleType = keccak256(abi.encode(_saleType));\\r\\n\\r\\n        // if liquidation sale type is public\\r\\n        if (practicalSaleType == PUBLIC_SALE) {\\r\\n            // implement listing asset on the marketplace\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // implement private sale\\r\\n        _liquidateInPrivateSale(\\r\\n            _borrowers[_borrowerId].nftCollateralTokenId,\\r\\n            _borrowerId,\\r\\n            _borrowers[_borrowerId].lenderId\\r\\n        );\\r\\n\\r\\n        emit CollateralLiquidated(\\r\\n            _borrowers[_borrowerId].lenderId,\\r\\n            _borrowerId,\\r\\n            _lenders[_borrowers[_borrowerId].lenderId].lender,\\r\\n            _borrowers[_borrowerId].borrower,\\r\\n            _borrowers[_borrowerId].innitialBorrowAmount,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Liquidate private sale\\r\\n    /*\\r\\n     * unfreeze nft Collateral\\r\\n     * transfer nft value to liquidator\\r\\n     * repay lender\\r\\n     * exonerate borrower\\r\\n     */\\r\\n    function _liquidateInPrivateSale(\\r\\n        uint256 _nftCollateralTokenId,\\r\\n        uint256 _borrowerId,\\r\\n        uint256 _lenderId\\r\\n    ) private {\\r\\n        // unfreeze nft Collateral\\r\\n        nftCollateral.unfreeze(_nftCollateralTokenId);\\r\\n\\r\\n        Borrower storage borrower = _borrowers[_borrowerId];\\r\\n        Lender storage lender = _lenders[_lenderId];\\r\\n\\r\\n        if (msg.value < borrower.currentBorrowAmount) {\\r\\n            revert(\\\"Liquidator Amount: insufficient funds\\\");\\r\\n        }\\r\\n\\r\\n        // transfer nft value to liquidator\\r\\n        nftCollateral.safeTransferFrom(\\r\\n            borrower.borrower,\\r\\n            msg.sender,\\r\\n            _nftCollateralTokenId\\r\\n        );\\r\\n        // repay lender\\r\\n        lender.currentAvailableLendAmount += msg.value; //available lend amount\\r\\n        lender.amountRepaid += msg.value;\\r\\n\\r\\n        // exonerate borrower\\r\\n        if (msg.value > borrower.currentBorrowAmount) {\\r\\n            borrower.currentBorrowAmount = 0;\\r\\n            borrower.isRepaid = true;\\r\\n        }\\r\\n\\r\\n        if (msg.value <= borrower.currentBorrowAmount) {\\r\\n            borrower.currentBorrowAmount -= msg.value;\\r\\n        }\\r\\n        borrower.amountAlreadyRemitted += msg.value;\\r\\n    }\\r\\n\\r\\n    // cancelLoan\\r\\n    function cancelLoan(\\r\\n        uint256 _lenderId\\r\\n    ) public onlyLender(_lenders[_lenderId].lender) {\\r\\n        _lenders[_lenderId].isActive = false;\\r\\n        emit LoanCancelled(\\r\\n            _lenderId,\\r\\n            _lenders[_lenderId].lender,\\r\\n            _lenders[_lenderId].innitialLendAmount,\\r\\n            _lenders[_lenderId].isActive\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // update loan duration\\r\\n\\r\\n    // add more funds\\r\\n    function addfunds(\\r\\n        uint256 _loanId\\r\\n    ) public payable onlyLender(_lenders[_loanId].lender) {\\r\\n        Lender storage lender = _lenders[_loanId];\\r\\n        lender.currentAvailableLendAmount += msg.value;\\r\\n        lender.innitialLendAmount += msg.value;\\r\\n\\r\\n        emit FundsAdded(\\r\\n            lender.currentAvailableLendAmount,\\r\\n            lender.innitialLendAmount,\\r\\n            _lenders[_loanId].lender,\\r\\n            _loanId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // deactivate loan\\r\\n\\r\\n    function lockLoan(\\r\\n        uint256 _loanId\\r\\n    ) public payable onlyLender(_lenders[_loanId].lender) {\\r\\n        _lenders[_loanId].locked = true;\\r\\n        emit LoanLocked(_loanId, _lenders[_loanId].locked);\\r\\n    }\\r\\n\\r\\n    function unlockLoan(\\r\\n        uint256 _loanId\\r\\n    ) public payable onlyLender(_lenders[_loanId].lender) {\\r\\n        _lenders[_loanId].locked = false;\\r\\n        emit LoanUnLocked(_loanId, _lenders[_loanId].locked);\\r\\n    }\\r\\n\\r\\n    // fetch loan single\\r\\n    function fetchLoanSingle(\\r\\n        uint256 _loanId\\r\\n    ) public view returns (Lender memory) {\\r\\n        return _lenders[_loanId];\\r\\n    }\\r\\n\\r\\n    // fetch borrow single\\r\\n    function fetchBorrowSingle(\\r\\n        uint256 _borrowId\\r\\n    ) public view returns (Borrower memory) {\\r\\n        return _borrowers[_borrowId];\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x1d33bb70a6bc65e8a8501d2259967a37def6380379afe5d635b0dc6c5cd077ae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061012d5760003560e01c806398c83a16116100a5578063bd857bad1161006c578063bd857bad1461030d578063bdbfa3de1461032d578063d5622c7a1461034d578063d789b9031461036d578063f2fde38b14610380578063fd797a9e146103a057005b806398c83a1614610292578063a180f61b146102a7578063aadc1ac1146102ba578063ab7b1c89146102da578063b1032e75146102ed57005b80636e1b7925116100f45780636e1b7925146101d5578063715018a6146101f55780637223be951461020a57806376a5213d1461023757806386c1c74d1461024a5780638da5cb5b1461026057005b80630fca15e7146101365780631ec33cdd14610149578063242011d51461017f5780634d57f0c91461019f5780635f89584e146101b257005b3661013457005b005b610134610144366004611a06565b6103c0565b34801561015557600080fd5b50610169610164366004611a06565b610462565b6040516101769190611a1f565b60405180910390f35b34801561018b57600080fd5b5061013461019a366004611adf565b610591565b6101346101ad366004611bb9565b6108b2565b3480156101be57600080fd5b506101c7610ae0565b604051908152602001610176565b3480156101e157600080fd5b506101c76101f0366004611a06565b610b14565b34801561020157600080fd5b50610134610b29565b34801561021657600080fd5b5061022a610225366004611a06565b610b3d565b6040516101769190611c43565b610134610245366004611a06565b610c4a565b34801561025657600080fd5b506101c760035481565b34801561026c57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610176565b34801561029e57600080fd5b506101c7610d48565b6101346102b5366004611a06565b610d68565b3480156102c657600080fd5b506101346102d5366004611a06565b610dfd565b6101346102e8366004611a06565b611229565b3480156102f957600080fd5b506101c7610308366004611a06565b6113df565b34801561031957600080fd5b5060065461027a906001600160a01b031681565b34801561033957600080fd5b50610134610348366004611a06565b6113ec565b34801561035957600080fd5b506101c7610368366004611cd3565b6114ae565b61013461037b366004611cff565b6114da565b34801561038c57600080fd5b5061013461039b366004611d21565b611665565b3480156103ac57600080fd5b506101c76103bb366004611a06565b6116db565b600081815260076020819052604090912001546201000090046001600160a01b031633811461040a5760405162461bcd60e51b815260040161040190611d3e565b60405180910390fd5b6000828152600760208181526040808420909201805460ff191690558151858152908101929092527f617479dbcccc23acb59aefc54cc2e0479b048270af3f740d2a9b09f9f66efbae91015b60405180910390a15050565b6104dc6040518061018001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000151581526020016000151581525090565b506000908152600860208181526040928390208351610180810185528154815260018201546001600160a01b03908116938201939093526002820154948101949094526003810154606085015260048101546080850152600581015460a0850152600681015460c0850152600781015460e08501529182015461010084015260099091015490811661012083015260ff600160a01b820481161515610140840152600160a81b90910416151561016082015290565b6001600160a01b03811633146105cb57604051637c48fd7760e11b81523360048201526001600160a01b0382166024820152604401610401565b60008481526007602081905260409091200154610100900460ff1661060357604051630417bc2360e11b815260040160405180910390fd5b6000848152600760208190526040909120015460ff16156106375760405163088e7d9560e21b815260040160405180910390fd5b610645600480546001019055565b600061065060045490565b9050604051806101800160405280828152602001336001600160a01b0316815260200185815260200160008152602001600081526020016000815260200160008152602001868152602001848152602001336001600160a01b0316815260200160001515815260200160001515815250600860008381526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101408201518160090160146101000a81548160ff0219169083151502179055506101608201518160090160156101000a81548160ff0219169083151502179055509050507f2f2fa4b6641567f948e65b0a4104b370e8dd9766ee3b6cf99438b0f908df56356007600083815260200190815260200160002060000154600860008481526020019081526020016000206002015487600760008a815260200190815260200160002060070160029054906101000a90046001600160a01b03166008600087815260200190815260200160002060010160009054906101000a90046001600160a01b03166040516108a3959493929190948552602085019390935260408401919091526001600160a01b03908116606084015216608082015260a00190565b60405180910390a15050505050565b6000828152600860208181526040928390208351610180810185528154815260018201546001600160a01b03908116938201939093526002820154948101949094526003810154606085015260048101546080850152600581015460a08501819052600682015460c0860152600782015460e0860152928101546101008501526009015490811661012084015260ff600160a01b820481161515610140850152600160a81b90910416151561016083015283919042116109aa5760405162461bcd60e51b81526020600482015260136024820152724c6f616e206973206e6f74206f76657264756560681b6044820152606401610401565b6000836040516020016109bd9190611d95565b6040516020818303038152906040528051906020012090506040516020016109f6906a5055424c49435f53414c4560a81b8152600b0190565b60405160208183030381529060405280519060200120811415610a195750610ada565b600085815260086020819052604090912090810154600790910154610a40919087906116f9565b600085815260086020818152604080842060078082015480875281855283872090910154958b9052938352600181015460029091015482519485529284018a9052620100009094046001600160a01b0390811691840191909152909216606082015260808101919091523360a08201527f87390dbcb6edae20b6a7cdc35a4c70b99cc1c4c9fe48a847226a3b647aea619f9060c0016108a3565b50505050565b6040516a5055424c49435f53414c4560a81b6020820152602b015b6040516020818303038152906040528051906020012081565b6000610b238262093a80611dde565b92915050565b610b316118ea565b610b3b6000611944565b565b610ba76040518061016001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160001515815260200160006001600160a01b03168152602001600081525090565b50600090815260076020818152604092839020835161016081018552815481526001820154928101929092526002810154938201939093526003830154606082015260048301546080820152600583015460a0820152600683015460c08201529082015460ff808216151560e08401526101008083049091161515908301526201000090046001600160a01b031661012082015260089091015461014082015290565b600081815260076020819052604090912001546201000090046001600160a01b0316338114610c8b5760405162461bcd60e51b815260040161040190611d3e565b600082815260076020526040812060028101805491923492610cae908490611dfd565b9250508190555034816001016000828254610cc99190611dfd565b90915550506002810154600182015460008581526007602081815260409283902090910154825194855290840192909252620100009091046001600160a01b031690820152606081018490527f0b6cf0e32a8f9281d882d68dd778489d19ecbfa2448d049fedda911c18232061906080015b60405180910390a1505050565b6040516b505249564154455f53414c4560a01b6020820152602c01610afb565b600081815260076020819052604090912001546201000090046001600160a01b0316338114610da95760405162461bcd60e51b815260040161040190611d3e565b600082815260076020818152604092839020909101805460ff191660019081179091558251858152918201527f8d79bf0f6b93a7b7c9ab5c9031ab53e80fa558cef462d14aceb66d51ee4ac5cb9101610456565b610e05611994565b600081815260086020818152604080842060078082015486529092529283902060018201546006549383015494516331a9108f60e11b81526004810195909552919390926001600160a01b03928316921690636352211e9060240160206040518083038186803b158015610e7857600080fd5b505afa158015610e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb09190611e25565b6001600160a01b031614610eff5760405162461bcd60e51b81526020600482015260166024820152752137b93937bbb2b9103737ba1027232a1037bbb732b960511b6044820152606401610401565b6006546008830154604051636f1a0af560e01b81526001600160a01b0390921691636f1a0af591610f369160040190815260200190565b60006040518083038186803b158015610f4e57600080fd5b505afa158015610f62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f8a9190810190611e97565b610180015115610fe85760405162461bcd60e51b815260206004820152602360248201527f4e4654204973206e6f7420456c696769626c65206173206120436f6c6c6174656044820152621c985b60ea1b6064820152608401610401565b8160020154816002015410156110405760405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f756768206361736820666f72204c6f616e00000000000000006044820152606401610401565b6006546008830154604051631af4f1b760e31b81526001600160a01b039092169163d7a78db8916110779160040190815260200190565b600060405180830381600087803b15801561109157600080fd5b505af11580156110a5573d6000803e3d6000fd5b505050506110c4826002015482600201546119ee90919063ffffffff16565b600282015560088101546110e2906110db906116db565b42906119fa565b6005830155600282015460038301546110fa916119fa565b600383015560098201805460ff60a01b1916600160a01b179055600282015460405160009133918381818185875af1925050503d8060008114611159576040519150601f19603f3d011682016040523d82523d6000602084013e61115e565b606091505b5050905061118761117c8460020154846005015485600801546114ae565b6002850154906119fa565b6002840155806111aa576040516312171d8360e31b815260040160405180910390fd5b600783810154908301546001850154600286015460408051948552602085018990526001600160a01b03620100009094048416908501529116606083015260808201527f0da39fecb301ec545e02d61d98a1bbb25e3c0065143ab4f75a74de6cdee433809060a00160405180910390a150505061122660018055565b50565b611231611994565b60008181526008602090815260408083206007808201548552909252909120348160020160008282546112649190611dfd565b925050819055503481600301600082825461127f9190611dfd565b925050819055503482600401600082825461129a9190611dfd565b909155505060038201543411156112b357600060038301555b816003015434116112d857348260030160008282546112d29190612006565b90915550505b81600201548260040154106112fd5760098201805460ff60a81b1916600160a81b1790555b6006546008830154604051633311fe2360e11b81526001600160a01b0390921691636623fc46916113349160040190815260200190565b600060405180830381600087803b15801561134e57600080fd5b505af1158015611362573d6000803e3d6000fd5b505050506007828101548354918301546001850154604080519384526020840194909452620100009091046001600160a01b039081168385015216606082015234608082015290517f8cfb4bbbef6e38ab280adc35e23333873cabe942691efabeb31540edc752501b9181900360a00190a1505061122660018055565b6000610b23826004611dde565b600081815260076020819052604090912001546201000090046001600160a01b031633811461142d5760405162461bcd60e51b815260040161040190611d3e565b600082815260076020818152604092839020918201805461ff0019169081905560019092015483518681526001600160a01b03620100008504169281019290925292810192909252610100900460ff16151560608201527f684b62b7cc6184a3cefa229c2fff1fff4c2f15bdcb6f3eff86846abf05d9329590608001610456565b60006104b0826114be8587611dde565b6114c89190611dde565b6114d2919061201d565b949350505050565b6114e8600580546001019055565b60006114f360055490565b90506040518061016001604052808281526020013481526020013481526020016000815260200160008152602001848152602001611541846000141561153b576002546116db565b846116db565b815260006020820152600160408201523360608201526080018361156757600254611569565b835b905260008281526007602081815260409283902084518155848201516001820181905585850151600283015560608087015160038401556080870151600484015560a0870151600584015560c0870151600684015560e08701519483018054610100808a01516101208b015161ffff1990931698151561ff00191698909817971515029690961762010000600160b01b031916620100006001600160a01b0397881681029190911791829055610140909801516008909401939093558551918252928101879052949004909116918301919091527f581f51c2b24b06d2a5e1f85b42d0d9cd4bb9506164d033f6146e21e35faa4aab9101610d3b565b61166d6118ea565b6001600160a01b0381166116d25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610401565b61122681611944565b6000806116e7836113df565b90506116f281610b14565b9392505050565b600654604051633311fe2360e11b8152600481018590526001600160a01b0390911690636623fc4690602401600060405180830381600087803b15801561173f57600080fd5b505af1158015611753573d6000803e3d6000fd5b505050600083815260086020908152604080832085845260079092529091206003820154919250903410156117d85760405162461bcd60e51b815260206004820152602560248201527f4c697175696461746f7220416d6f756e743a20696e73756666696369656e742060448201526466756e647360d81b6064820152608401610401565b6006546001830154604051632142170760e11b81526001600160a01b039182166004820152336024820152604481018890529116906342842e0e90606401600060405180830381600087803b15801561183057600080fd5b505af1158015611844573d6000803e3d6000fd5b505050503481600201600082825461185c9190611dfd565b92505081905550348160030160008282546118779190611dfd565b909155505060038201543411156118a5576000600383015560098201805460ff60a81b1916600160a81b1790555b816003015434116118ca57348260030160008282546118c49190612006565b90915550505b348260040160008282546118de9190611dfd565b90915550505050505050565b6000546001600160a01b03163314610b3b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610401565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015414156119e75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610401565b6002600155565b60006116f28284612006565b60006116f28284611dfd565b600060208284031215611a1857600080fd5b5035919050565b81518152602080830151610180830191611a43908401826001600160a01b03169052565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151611aa7828501826001600160a01b03169052565b505061014083810151151590830152610160928301511515929091019190915290565b6001600160a01b038116811461122657600080fd5b60008060008060808587031215611af557600080fd5b8435935060208501359250604085013591506060850135611b1581611aca565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff81118282101715611b5a57611b5a611b20565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611b8957611b89611b20565b604052919050565b600067ffffffffffffffff821115611bab57611bab611b20565b50601f01601f191660200190565b60008060408385031215611bcc57600080fd5b82359150602083013567ffffffffffffffff811115611bea57600080fd5b8301601f81018513611bfb57600080fd5b8035611c0e611c0982611b91565b611b60565b818152866020838501011115611c2357600080fd5b816020840160208301376000602083830101528093505050509250929050565b600061016082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e0830151611c9f60e084018215159052565b5061010083810151151590830152610120808401516001600160a01b03169083015261014092830151929091019190915290565b600080600060608486031215611ce857600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611d1257600080fd5b50508035926020909101359150565b600060208284031215611d3357600080fd5b81356116f281611aca565b60208082526011908201527029b2b73232b9103737ba102632b73232b960791b604082015260600190565b60005b83811015611d84578181015183820152602001611d6c565b83811115610ada5750506000910152565b6020815260008251806020840152611db4816040850160208701611d69565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611df857611df8611dc8565b500290565b60008219821115611e1057611e10611dc8565b500190565b8051611e2081611aca565b919050565b600060208284031215611e3757600080fd5b81516116f281611aca565b600082601f830112611e5357600080fd5b8151611e61611c0982611b91565b818152846020838601011115611e7657600080fd5b6114d2826020830160208701611d69565b80518015158114611e2057600080fd5b600060208284031215611ea957600080fd5b815167ffffffffffffffff80821115611ec157600080fd5b908301906101a08286031215611ed657600080fd5b611ede611b36565b611ee783611e15565b8152602083015182811115611efb57600080fd5b611f0787828601611e42565b602083015250604083015182811115611f1f57600080fd5b611f2b87828601611e42565b604083015250606083015160608201526080830151608082015260a083015182811115611f5757600080fd5b611f6387828601611e42565b60a08301525060c083015160c082015260e083015160e08201526101008084015181830152506101208084015183811115611f9d57600080fd5b611fa988828701611e42565b828401525050610140611fbd818501611e87565b908201526101608381015183811115611fd557600080fd5b611fe188828701611e42565b8284015250506101809150611ff7828401611e87565b91810191909152949350505050565b60008282101561201857612018611dc8565b500390565b60008261203a57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220325b85dca9a61e4efedb17cc8bbd2e2b63c9f3e72dde60849d605244782eeb8264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/Loan.sol:Loan",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4176,
        "contract": "contracts/Loan.sol:Loan",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13738,
        "contract": "contracts/Loan.sol:Loan",
        "label": "_defaultLoanDuration",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 13741,
        "contract": "contracts/Loan.sol:Loan",
        "label": "defaultInterestRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 13764,
        "contract": "contracts/Loan.sol:Loan",
        "label": "_borrowersIds",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)9218_storage"
      },
      {
        "astId": 13767,
        "contract": "contracts/Loan.sol:Loan",
        "label": "_lendersIds",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Counter)9218_storage"
      },
      {
        "astId": 13770,
        "contract": "contracts/Loan.sol:Loan",
        "label": "nftCollateral",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(Fisch)13721"
      },
      {
        "astId": 13972,
        "contract": "contracts/Loan.sol:Loan",
        "label": "_lenders",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Lender)13804_storage)"
      },
      {
        "astId": 13977,
        "contract": "contracts/Loan.sol:Loan",
        "label": "_borrowers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Borrower)13829_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Fisch)13721": {
        "encoding": "inplace",
        "label": "contract Fisch",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Borrower)13829_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Loan.Borrower)",
        "numberOfBytes": "32",
        "value": "t_struct(Borrower)13829_storage"
      },
      "t_mapping(t_uint256,t_struct(Lender)13804_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Loan.Lender)",
        "numberOfBytes": "32",
        "value": "t_struct(Lender)13804_storage"
      },
      "t_struct(Borrower)13829_storage": {
        "encoding": "inplace",
        "label": "struct Loan.Borrower",
        "members": [
          {
            "astId": 13806,
            "contract": "contracts/Loan.sol:Loan",
            "label": "borrowerId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13808,
            "contract": "contracts/Loan.sol:Loan",
            "label": "borrower",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 13810,
            "contract": "contracts/Loan.sol:Loan",
            "label": "innitialBorrowAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13812,
            "contract": "contracts/Loan.sol:Loan",
            "label": "currentBorrowAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13814,
            "contract": "contracts/Loan.sol:Loan",
            "label": "amountAlreadyRemitted",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13816,
            "contract": "contracts/Loan.sol:Loan",
            "label": "deadline",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13818,
            "contract": "contracts/Loan.sol:Loan",
            "label": "interest",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 13820,
            "contract": "contracts/Loan.sol:Loan",
            "label": "lenderId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 13822,
            "contract": "contracts/Loan.sol:Loan",
            "label": "nftCollateralTokenId",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 13824,
            "contract": "contracts/Loan.sol:Loan",
            "label": "receiverAddress",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          },
          {
            "astId": 13826,
            "contract": "contracts/Loan.sol:Loan",
            "label": "isApproved",
            "offset": 20,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 13828,
            "contract": "contracts/Loan.sol:Loan",
            "label": "isRepaid",
            "offset": 21,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Counter)9218_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 9217,
            "contract": "contracts/Loan.sol:Loan",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Lender)13804_storage": {
        "encoding": "inplace",
        "label": "struct Loan.Lender",
        "members": [
          {
            "astId": 13783,
            "contract": "contracts/Loan.sol:Loan",
            "label": "loanId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13785,
            "contract": "contracts/Loan.sol:Loan",
            "label": "innitialLendAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13787,
            "contract": "contracts/Loan.sol:Loan",
            "label": "currentAvailableLendAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13789,
            "contract": "contracts/Loan.sol:Loan",
            "label": "amountRepaid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13791,
            "contract": "contracts/Loan.sol:Loan",
            "label": "borrowerId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13793,
            "contract": "contracts/Loan.sol:Loan",
            "label": "interestRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13795,
            "contract": "contracts/Loan.sol:Loan",
            "label": "loanOutDuration",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 13797,
            "contract": "contracts/Loan.sol:Loan",
            "label": "locked",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 13799,
            "contract": "contracts/Loan.sol:Loan",
            "label": "isActive",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 13801,
            "contract": "contracts/Loan.sol:Loan",
            "label": "lender",
            "offset": 2,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 13803,
            "contract": "contracts/Loan.sol:Loan",
            "label": "loanDurationInMonthCount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}